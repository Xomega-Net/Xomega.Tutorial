//---------------------------------------------------------------------------------------------
// This file was AUTO-GENERATED by "Web API Controllers" Xomega.Net generator.
//
// Manual CHANGES to this file WILL BE LOST when the code is regenerated.
//---------------------------------------------------------------------------------------------

using AdventureWorks.Services.Common;
using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Xomega.Framework;
using Xomega.Framework.Services;

namespace AdventureWorks.Services.Rest
{
    ///<summary>
    /// Source of the ID that connects vendors, customers, and employees with address and contact information.
    ///</summary>
    public partial class BusinessEntityController : BaseController
    {
        private readonly IBusinessEntityService svc;

        public BusinessEntityController(ErrorList errorList, ErrorParser errorParser, IBusinessEntityService service)
            : base(errorList, errorParser)
        {
            svc = service;
        }

        ///<summary>
        /// Reads enumeration data for Business Entity Address.
        ///</summary>
        [Route("business-entity/{_businessEntityId}/address/enum")]
        [HttpGet]
        public async Task<ActionResult> Address_ReadEnumAsync([FromRoute] int _businessEntityId, CancellationToken token = default)
        {
            ActionResult response;
            try
            {
                if (ModelState.IsValid)
                {
                    Output<ICollection<BusinessEntityAddress_ReadEnumOutput>> output = await svc.Address_ReadEnumAsync(_businessEntityId, token);
                    response = StatusCode((int)output.HttpStatus, output);
                    return response;
                }
                else
                {
                    currentErrors.AddModelErrors(ModelState);
                }
            }
            catch (Exception ex)
            {
                currentErrors.MergeWith(errorsParser.FromException(ex));
            }
            response = StatusCode((int)currentErrors.HttpStatus, new Output(currentErrors));
            return response;
        }
    }
}