//---------------------------------------------------------------------------------------------
// This file was AUTO-GENERATED by "Xomega Data Objects" Xomega.Net generator.
//
// Manual CHANGES to this file WILL BE LOST when the code is regenerated.
//---------------------------------------------------------------------------------------------

using AdventureWorks.Services.Common;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Threading;
using System.Threading.Tasks;
using Xomega.Framework;
using Xomega.Framework.Properties;
using Xomega.Framework.Services;

namespace AdventureWorks.Client.Common.DataObjects
{
    public partial class SalesOrderObject : DataObject
    {
        #region Constants

        public const string AccountNumber = "AccountNumber";
        public const string BillToAddressId = "BillToAddressId";
        public const string Comment = "Comment";
        public const string CreditCardApprovalCode = "CreditCardApprovalCode";
        public const string CreditCardId = "CreditCardId";
        public const string CurrencyRateId = "CurrencyRateId";
        public const string CustomerId = "CustomerId";
        public const string Detail = "Detail";
        public const string DueDate = "DueDate";
        public const string Freight = "Freight";
        public const string ModifiedDate = "ModifiedDate";
        public const string OnlineOrderFlag = "OnlineOrderFlag";
        public const string OrderDate = "OrderDate";
        public const string PurchaseOrderNumber = "PurchaseOrderNumber";
        public const string Reason = "Reason";
        public const string RevisionNumber = "RevisionNumber";
        public const string Rowguid = "Rowguid";
        public const string SalesOrderId = "SalesOrderId";
        public const string SalesOrderNumber = "SalesOrderNumber";
        public const string SalesPersonId = "SalesPersonId";
        public const string ShipDate = "ShipDate";
        public const string ShipMethodId = "ShipMethodId";
        public const string ShipToAddressId = "ShipToAddressId";
        public const string Status = "Status";
        public const string SubTotal = "SubTotal";
        public const string TaxAmt = "TaxAmt";
        public const string TerritoryId = "TerritoryId";
        public const string TotalDue = "TotalDue";

        #endregion

        #region Properties

        public TextProperty AccountNumberProperty { get; private set; }
        public IntegerKeyProperty BillToAddressIdProperty { get; private set; }
        public TextProperty CommentProperty { get; private set; }
        public TextProperty CreditCardApprovalCodeProperty { get; private set; }
        public IntegerKeyProperty CreditCardIdProperty { get; private set; }
        public IntegerKeyProperty CurrencyRateIdProperty { get; private set; }
        public IntegerKeyProperty CustomerIdProperty { get; private set; }
        public DateTimeProperty DueDateProperty { get; private set; }
        public MoneyProperty FreightProperty { get; private set; }
        public DateTimeProperty ModifiedDateProperty { get; private set; }
        public BooleanProperty OnlineOrderFlagProperty { get; private set; }
        public DateTimeProperty OrderDateProperty { get; private set; }
        public TextProperty PurchaseOrderNumberProperty { get; private set; }
        public TinyIntegerProperty RevisionNumberProperty { get; private set; }
        public GuidProperty RowguidProperty { get; private set; }
        public IntegerKeyProperty SalesOrderIdProperty { get; private set; }
        public TextProperty SalesOrderNumberProperty { get; private set; }
        public EnumIntProperty SalesPersonIdProperty { get; private set; }
        public DateTimeProperty ShipDateProperty { get; private set; }
        public IntegerKeyProperty ShipMethodIdProperty { get; private set; }
        public IntegerKeyProperty ShipToAddressIdProperty { get; private set; }
        public EnumByteProperty StatusProperty { get; private set; }
        public MoneyProperty SubTotalProperty { get; private set; }
        public MoneyProperty TaxAmtProperty { get; private set; }
        public EnumIntProperty TerritoryIdProperty { get; private set; }
        public MoneyProperty TotalDueProperty { get; private set; }

        #endregion

        #region Child Objects

        public SalesOrderDetailList DetailList { get { return (SalesOrderDetailList)GetChildObject(Detail); } }
        public SalesOrderReasonList ReasonList { get { return (SalesOrderReasonList)GetChildObject(Reason); } }

        #endregion

        #region Construction

        public SalesOrderObject()
        {
        }

        public SalesOrderObject(IServiceProvider serviceProvider) : base(serviceProvider)
        {
        }

        protected override void Initialize()
        {
            SalesOrderIdProperty = new IntegerKeyProperty(this, SalesOrderId)
            {
                Required = true,
                Editable = false,
                IsKey = true,
            };
            RevisionNumberProperty = new TinyIntegerProperty(this, RevisionNumber)
            {
                Required = true,
            };
            OrderDateProperty = new DateTimeProperty(this, OrderDate)
            {
                Required = true,
            };
            DueDateProperty = new DateTimeProperty(this, DueDate)
            {
                Required = true,
            };
            ShipDateProperty = new DateTimeProperty(this, ShipDate)
            {
            };
            StatusProperty = new EnumByteProperty(this, Status)
            {
                Required = true,
                EnumType = "sales order status",
            };
            OnlineOrderFlagProperty = new BooleanProperty(this, OnlineOrderFlag)
            {
                Required = true,
            };
            SalesOrderNumberProperty = new TextProperty(this, SalesOrderNumber)
            {
                Required = true,
                Size = 25,
            };
            PurchaseOrderNumberProperty = new TextProperty(this, PurchaseOrderNumber)
            {
                Size = 25,
            };
            AccountNumberProperty = new TextProperty(this, AccountNumber)
            {
                Size = 15,
            };
            CustomerIdProperty = new IntegerKeyProperty(this, CustomerId)
            {
                Required = true,
            };
            SalesPersonIdProperty = new EnumIntProperty(this, SalesPersonId)
            {
                EnumType = "sales person",
            };
            TerritoryIdProperty = new EnumIntProperty(this, TerritoryId)
            {
                EnumType = "sales territory",
            };
            BillToAddressIdProperty = new IntegerKeyProperty(this, BillToAddressId)
            {
                Required = true,
            };
            ShipToAddressIdProperty = new IntegerKeyProperty(this, ShipToAddressId)
            {
                Required = true,
            };
            ShipMethodIdProperty = new IntegerKeyProperty(this, ShipMethodId)
            {
                Required = true,
            };
            CreditCardIdProperty = new IntegerKeyProperty(this, CreditCardId)
            {
            };
            CreditCardApprovalCodeProperty = new TextProperty(this, CreditCardApprovalCode)
            {
                Size = 15,
            };
            CurrencyRateIdProperty = new IntegerKeyProperty(this, CurrencyRateId)
            {
            };
            SubTotalProperty = new MoneyProperty(this, SubTotal)
            {
                Required = true,
            };
            TaxAmtProperty = new MoneyProperty(this, TaxAmt)
            {
                Required = true,
            };
            FreightProperty = new MoneyProperty(this, Freight)
            {
                Required = true,
            };
            TotalDueProperty = new MoneyProperty(this, TotalDue)
            {
                Required = true,
            };
            CommentProperty = new TextProperty(this, Comment)
            {
                Size = 128,
            };
            RowguidProperty = new GuidProperty(this, Rowguid)
            {
                Required = true,
            };
            ModifiedDateProperty = new DateTimeProperty(this, ModifiedDate)
            {
                Required = true,
            };
            DataObject objDetail = ServiceProvider.GetService<SalesOrderDetailList>();
            AddChildObject(Detail, objDetail);
            DataObject objReason = ServiceProvider.GetService<SalesOrderReasonList>();
            AddChildObject(Reason, objReason);
        }

        #endregion

        #region CRUD Operations

        protected override async Task<ErrorList> DoReadAsync(object options, CancellationToken token = default)
        {
            var output = await SalesOrder_ReadAsync(options, token);
            return output.Messages;
        }

        protected override async Task<ErrorList> DoSaveAsync(object options, CancellationToken token = default)
        {
            if (IsNew)
            {
                var output = await SalesOrder_CreateAsync(options, token);
                return output.Messages;
            }
            else
            {
                var output = await SalesOrder_UpdateAsync(options, token);
                return output.Messages;
            }
        }

        protected override async Task<ErrorList> DoDeleteAsync(object options, CancellationToken token = default)
        {
            var output = await SalesOrder_DeleteAsync(options, token);
            return output.Messages;
        }

        #endregion

        #region Service Operations

        protected virtual async Task<Output<SalesOrder_ReadOutput>> SalesOrder_ReadAsync(object options, CancellationToken token = default)
        {
            int _salesOrderId = (int)SalesOrderIdProperty.TransportValue;
            using (var s = ServiceProvider.CreateScope())
            {
                var output = await s.ServiceProvider.GetService<ISalesOrderService>().ReadAsync(_salesOrderId, token);

                await FromDataContractAsync(output?.Result, options, token);
                return output;
            }
        }

        protected virtual async Task<Output<SalesOrder_CreateOutput>> SalesOrder_CreateAsync(object options, CancellationToken token = default)
        {
            SalesOrder_CreateInput _data = ToDataContract<SalesOrder_CreateInput>(options);
            using (var s = ServiceProvider.CreateScope())
            {
                var output = await s.ServiceProvider.GetService<ISalesOrderService>().CreateAsync(_data, token);

                await FromDataContractAsync(output?.Result, options, token);
                return output;
            }
        }

        protected virtual async Task<Output> SalesOrder_UpdateAsync(object options, CancellationToken token = default)
        {
            int _salesOrderId = (int)SalesOrderIdProperty.TransportValue;
            SalesOrder_UpdateInput_Data _data = ToDataContract<SalesOrder_UpdateInput_Data>(options);
            using (var s = ServiceProvider.CreateScope())
            {
                var output = await s.ServiceProvider.GetService<ISalesOrderService>().UpdateAsync(_salesOrderId, _data, token);

                return output;
            }
        }

        protected virtual async Task<Output> SalesOrder_DeleteAsync(object options, CancellationToken token = default)
        {
            int _salesOrderId = (int)SalesOrderIdProperty.TransportValue;
            using (var s = ServiceProvider.CreateScope())
            {
                var output = await s.ServiceProvider.GetService<ISalesOrderService>().DeleteAsync(_salesOrderId, token);

                return output;
            }
        }

        #endregion
    }
}